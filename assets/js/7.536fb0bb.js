(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{358:function(v,_,t){v.exports=t.p+"assets/img/tcp.5a7fb8c1.png"},359:function(v,_,t){v.exports=t.p+"assets/img/tcp-control.7bf3e05e.png"},433:function(v,_,t){"use strict";t.r(_);var s=t(42),a=Object(s.a)({},(function(){var v=this,_=v.$createElement,s=v._self._c||_;return s("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[s("h1",{attrs:{id:"tcp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[v._v("#")]),v._v(" tcp")]),v._v(" "),s("h2",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[v._v("#")]),v._v(" 特点")]),v._v(" "),s("ul",[s("li",[v._v("可靠传输")]),v._v(" "),s("li",[v._v("顺序保证")]),v._v(" "),s("li",[v._v("流量控制")]),v._v(" "),s("li",[v._v("两者都位于传输层，处于IP协议的上一层")])]),v._v(" "),s("h2",{attrs:{id:"三次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[v._v("#")]),v._v(" 三次握手")]),v._v(" "),s("ul",[s("li",[v._v("1.建立连接时，客户端发送 "),s("code",[v._v("SYN")]),v._v(" 包到服务器，等服务器回应。(SYN 同步序列编号，建立链接时的握手信号)")]),v._v(" "),s("li",[v._v("2.服务器收到 "),s("code",[v._v("SYN")]),v._v(" 包，使用 "),s("code",[v._v("ACK")]),v._v(" 包确认应答，同时发送一个 "),s("code",[v._v("SYN")]),v._v(" 包，即发送 "),s("code",[v._v("SYN")]),v._v(" + "),s("code",[v._v("ACK")]),v._v(" 包。")]),v._v(" "),s("li",[v._v("3.客户端收到服务器的 "),s("code",[v._v("SYN")]),v._v(" 包，向服务器发送 "),s("code",[v._v("ACK")]),v._v(" 确认包，代表 TCP 连接完成，完成三次握手。")])]),v._v(" "),s("p",[s("img",{attrs:{src:t(358),alt:""}})]),v._v(" "),s("h2",{attrs:{id:"拥塞控制和流量控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拥塞控制和流量控制"}},[v._v("#")]),v._v(" 拥塞控制和流量控制")]),v._v(" "),s("ul",[s("li",[s("p",[v._v("慢启动")]),v._v(" "),s("p",[v._v("在刚开始发送的时候，先把拥塞窗口CWND设置为最大报文段MSS，每收到一个对新报文段的确认后，就把拥塞窗口最多增加一个MSS数值。\n为了防止拥塞窗口过大引起网络拥塞，我们需要设置一个慢开始门限ssthreth状态变量，当cwnd < ssthreth时，使用慢开始算法；当cwnd> ssthrerth时，使用拥塞控制算法；如果两者相等，两个都可以使用。")])]),v._v(" "),s("li",[s("p",[v._v("拥塞避免\n只要发送方判断出网络拥塞，不论是在慢开始还是拥塞控制阶段，都要把慢开始门限值设置为出现拥塞时发送端窗口大小的一半，但不能小于2。然后把cwnd重新置为1，执行慢开始算法。\n门限值减半，cwnd重置为1，做目的是减少发送到网络中的分组数，使得发生拥塞的路由器能够有时间能把队列中积压的分组处理掉。\n发送端判断网络拥塞的依据：")]),v._v(" "),s("ul",[s("li",[v._v("①传送超时，即TCP重传定时器溢出")]),v._v(" "),s("li",[v._v("②收到重复的确认报文")])])]),v._v(" "),s("li",[s("p",[v._v("快重传")]),v._v(" "),s("p",[v._v("快重传算法要求接收方每收到一个失序的报文段后就立即发出重复确认，而不要等到自己发送数据时才进行捎带确认。发送方只要一连收到3个同样的确认报文就应当立即重传数据报，不必等待报文段的重传计时器到期。")])]),v._v(" "),s("li",[s("p",[v._v("快恢复")]),v._v(" "),s("p",[v._v("把慢开始门限减半，“乘法减小”，将cwnd设置为新的慢开始门限值，继续执行拥塞避免算法，“加法增大”")])])]),v._v(" "),s("p",[s("img",{attrs:{src:t(359),alt:""}})]),v._v(" "),s("h2",{attrs:{id:"四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[v._v("#")]),v._v(" 四次挥手")]),v._v(" "),s("ul",[s("li",[v._v("1.客户端向服务端发送释放连接报文 "),s("code",[v._v("FIN")]),v._v("，等待服务端确认，并停止发送数据。")]),v._v(" "),s("li",[v._v("2.服务器收到连接释放请求后，发送 "),s("code",[v._v("ACK")]),v._v(" 包表示确认。（此状态下，表示客户端到服务器的连接已经释放，不再接受客户端发的数据了，但是服务器要是还发送数据，客户端依然接收）")]),v._v(" "),s("li",[v._v("3.服务器将最后的数据发送完毕后，就向客户端发送连接释放报文 "),s("code",[v._v("FIN")]),v._v("，等待客户端确认。")]),v._v(" "),s("li",[v._v("4.客户端收到服务器连接释放报文后，发出 "),s("code",[v._v("ACK")]),v._v(" 包表示确认。此时客户端会进入 TIME_WAIT 状态，该状态将持续2MSL（最大报文段生存时间，指报文段在网络中生存的时间，超时将被抛弃）时间，若该时间段内没有服务器重发请求的话，就进入关闭状态，当服务端接收到 "),s("code",[v._v("ACK")]),v._v(" 应答后，立即进入关闭状态。")])]),v._v(" "),s("h2",{attrs:{id:"常见问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[v._v("#")]),v._v(" 常见问题")]),v._v(" "),s("ul",[s("li",[s("ol",[s("li",[v._v("为什么建立连接要三次握手，为什么不是2次，4次")])])])]),v._v(" "),s("p",[v._v("三次是最小的安全次数，可以保证通信的双方都具有发送消息和接收响应的能力，发送方和接收方始终同步序号，可以实现可靠传输。")]),v._v(" "),s("ul",[s("li",[v._v("2.为什么连接的时候需要三次握手，关闭时需要四次握手")])]),v._v(" "),s("p",[v._v("在建立TCP连接时，Server端在接收到客户端的SYN连接请求后，可以直接发送SYN+ACK包，其中ACK作为应答，SYN用来发起连接请求。但是关闭连接时，服务端收到FIN包时，可能还没有发送完数据，不能立即关闭，所以只能先回复ACK包进行确认，告知客户端已经收到FIN报文。然后等到服务端数据都发送完毕，才能向客户端发送FIN包，所以需要四次握手。")]),v._v(" "),s("h1",{attrs:{id:"udp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[v._v("#")]),v._v(" udp")]),v._v(" "),s("ul",[s("li",[v._v("不可靠传输，可靠性由应用层负责")]),v._v(" "),s("li",[v._v("延迟小、数据传输效率高")])])])}),[],!1,null,null,null);_.default=a.exports}}]);