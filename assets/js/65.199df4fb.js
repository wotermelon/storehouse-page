(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{424:function(t,a,e){"use strict";e.r(a);var v=e(42),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"垃圾回收机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收机制"}},[t._v("#")]),t._v(" 垃圾回收机制")]),t._v(" "),e("h2",{attrs:{id:"副垃圾回收器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#副垃圾回收器"}},[t._v("#")]),t._v(" 副垃圾回收器")]),t._v(" "),e("blockquote",[e("p",[t._v("主要负责新生代的垃圾回收。新生代中存放的是生存时间短的对象。为了执行效率，一般新生区的空间会被设置得比较小\n对象晋升策略，也就是经过两次垃圾回收依然还存活的对象，会被移动到老生区中。")])]),t._v(" "),e("ul",[e("li",[t._v("新生代中用 "),e("code",[t._v("Scavenge")]),t._v(" 算法来处理。所谓 Scavenge 算法，是把新生代空间对半划分为两个区域，一半是对象区域，一半是空闲区域.")]),t._v(" "),e("li",[t._v("新加入的对象都会存放到对象区域，当对象区域快被写满时，就需要执行一次垃圾清理操作。")]),t._v(" "),e("li",[t._v("在垃圾回收过程中，首先要对对象区域中的垃圾做标记；标记完成之后，就进入垃圾清理阶段，副垃圾回收器会把这些存活的对象复制到空闲区域中，同时它还会把这些对象有序地排列起来，所以这个复制过程，也就相当于完成了内存整理操作，复制后空闲区域就没有内存碎片了。")]),t._v(" "),e("li",[t._v("标记过程阶段。标记阶段就是从一组根元素开始，递归遍历这组根元素，在这个遍历过程中，能到达的元素称为"),e("code",[t._v("活动对象")]),t._v("，没有到达的元素就可以判断为"),e("code",[t._v("垃圾数据")]),t._v("。")]),t._v(" "),e("li",[t._v("完成复制后，对象区域与空闲区域进行角色翻转，也就是原来的对象区域变成空闲区域，原来的空闲区域变成了对象区域。这样就完成了垃圾对象的回收操作，同时这种角色翻转的操作还能让新生代中的这两块区域无限重复使用下去。")])]),t._v(" "),e("h2",{attrs:{id:"主垃圾回收器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主垃圾回收器"}},[t._v("#")]),t._v(" 主垃圾回收器")]),t._v(" "),e("blockquote",[e("p",[t._v("主要负责老生代的垃圾回收。老生代中存放的生存时间久的对象。")])]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("标记-清除（Mark-Sweep）")]),t._v("\n首先是标记过程阶段。标记阶段就是从一组根元素开始，递归遍历这组根元素，在这个遍历过程中，能到达的元素称为"),e("code",[t._v("活动对象")]),t._v("，没有到达的元素就可以判断为"),e("code",[t._v("垃圾数据")]),t._v("。\n对一块内存多次执行标记 - 清除算法后，会产生大量不连续的内存碎片。而碎片过多会导致大对象无法分配到足够的连续内存。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("标记-整理（Mark-Compact）")]),t._v("\n标记过程与标记-清除算法一样，后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存")])])]),t._v(" "),e("h3",{attrs:{id:"全停顿（stop-the-world）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全停顿（stop-the-world）"}},[t._v("#")]),t._v(" "),e("code",[t._v("全停顿（Stop-The-World）")])]),t._v(" "),e("p",[t._v("JavaScript 是运行在主线程之上的，一旦执行垃圾回收算法，都需要将正在执行的 JavaScript 脚本暂停下来，待垃圾回收完毕后再恢复脚本执行。")]),t._v(" "),e("h3",{attrs:{id:"增量标记（incremental-marking）算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#增量标记（incremental-marking）算法"}},[t._v("#")]),t._v(" "),e("code",[t._v("增量标记（Incremental Marking）算法")])]),t._v(" "),e("p",[t._v("为了降低老生代的垃圾回收而造成的卡顿，V8 将标记过程分为一个个的子标记过程，同时让垃圾回收标记和 JavaScript 应用逻辑交替进行，直到标记阶段完成。")])])}),[],!1,null,null,null);a.default=_.exports}}]);